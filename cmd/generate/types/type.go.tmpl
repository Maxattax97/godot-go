package gdnative

/*------------------------------------------------------------------------------
//   This code was generated by template {{ .TemplateName }}.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "{{ .TemplateName }}" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

/*
// cgo pkg-config: --define-variable=PROJECTDIR=${SRCDIR}/../.. ${SRCDIR}/../../godot.pc
#include <gdnative.wrappergen.h>
#include <gdnative/aabb.h>
#include <gdnative/array.h>
#include <gdnative/basis.h>
#include <gdnative/color.h>
#include <gdnative/dictionary.h>
#include <gdnative/gdnative.h>
#include <gdnative/node_path.h>
#include <gdnative/plane.h>
#include <gdnative/pool_arrays.h>
#include <gdnative/quat.h>
#include <gdnative/rect2.h>
#include <gdnative/rid.h>
#include <gdnative/string.h>
#include <gdnative/string_name.h>
#include <gdnative/transform.h>
#include <gdnative/transform2d.h>
#include <gdnative/variant.h>
#include <gdnative/vector2.h>
#include <gdnative/vector3.h>
#include <gdnative_api_struct.gen.h>
#include <stdlib.h>
*/
import "C"
import (
"unsafe"
"runtime"
)

/* Global Functions */
{{ range $j, $method := .Globals }}
    {{ template "GLOBAL_METHOD" $method }}
{{ end }}

/* TypeDefs */
{{ range $j, $typeDef := .TypeDefs }}
    type {{ $typeDef.Name }} C.{{ $typeDef.CName }}

    {{ if eq $typeDef.Base "enum" }}
    const (
        {{ range $j, $prop := $typeDef.Properties }}
            {{- if eq $j 0 -}}
                {{ $prop.CName }} {{ $typeDef.Name }} = iota
            {{- else -}}
                {{ $prop.CName }}
            {{- end}}
        {{ end }}
    )
    {{ end }}

    {{ range $j, $constructor := $typeDef.Constructors }}
        {{ template "CONSTRUCTOR_METHOD" $constructor }}
    {{ end }}

    {{ range $j, $method := $typeDef.Methods }}
        {{ if $method.IsSetter }}
            {{ template "SETTER_METHOD" $method }}
        {{ else }}
            {{ template "GETTER_METHOD" $method }}
        {{ end }}
    {{ end }}
{{ end }}

{{ define "CONSTRUCTOR_METHOD" }}
    func {{ .Name }}({{ template "ARGUMENTS" .Arguments }}) {{ .ReturnType.Name }} {
        dest := {{ .ReturnType.Name }}{}

        api := {{ .ApiMetadata.Name }}
        {{- if and (eq .ReturnType.CName "godot_object") .ReturnType.HasPointer }}
            rcv := unsafe.Pointer(&dest)
        {{- else if and (eq .ReturnType.CName "void") .ReturnType.HasPointer }}
            rcv := unsafe.Pointer(&dest)
        {{- else }}
            rcv := (*C.{{ .ReturnType.CName }})(unsafe.Pointer(&dest))
        {{- end }}
        {{- range $k, $arg := .Arguments }}
            {{- if and (eq $arg.Type.CName "godot_object") $arg.Type.HasPointer }}
                in{{ $k }} := unsafe.Pointer({{ $arg.Name }})
            {{- else if and (eq $arg.Type.CName "void") $arg.Type.HasPointer }}
                in{{ $k }} := unsafe.Pointer({{ $arg.Name }})
            {{- else if and (eq $arg.Type.CName "char") $arg.Type.HasPointer }}
                /* {{ $arg.Type.CName }} */
                in{{ $k }} := C.CString({{ $arg.Name }})
                defer C.free(unsafe.Pointer(in{{ $k }}))
            {{- else if and (eq $arg.Type.CName "godot_variant") $arg.Type.HasDoublePointer }}
                cArr{{ $k }} := CArrayFromVariantPtrSlice({{ $arg.Name }})
                defer Free(unsafe.Pointer(cArr{{ $k }}))
                in{{ $k }} := (**C.{{ $arg.Type.CName }})(unsafe.Pointer(cArr{{ $k }}))
            {{- else if and (eq $arg.Type.CName "void") $arg.Type.HasDoublePointer }}
                cArr{{ $k }} := CArrayRefFromPtrSlice({{ $arg.Name }})
                in{{ $k }} := (*unsafe.Pointer)(unsafe.Pointer(cArr{{ $k }}))
            {{- else if $arg.Type.HasPointer }}
                in{{ $k }} := (*C.{{ $arg.Type.CName }})(unsafe.Pointer(&{{ $arg.Name }}))
            {{- else }}
                in{{ $k }} := *(*C.{{ $arg.Type.CName }})(unsafe.Pointer(&{{ $arg.Name }}))
            {{- end }}
        {{- end }}

        {{ template "DESCRIBE_CMETHOD" . }}
        C.go_{{ .CName }}(
            api, 
            rcv,
            {{- range $k, $arg := .Arguments }}
                in{{ $k }},
            {{- end }}
        )

        {{- range $k, $arg := .Arguments }}
            runtime.KeepAlive(in{{$k}})
        {{- end }}
        return dest
    }
{{ end }}

{{ define "SETTER_METHOD" }}
    /* Setter Method: {{ .CName }} -> {{ .ReturnType.CName }} */
    func (gdt *{{ .Receiver.Type.Name }}) {{ .Name }}({{ template "ARGUMENTS" .Arguments }}) {
        {{ template "DESCRIBE_CMETHOD" . }}
        
        api := {{ .ApiMetadata.Name }}
        {{- if and (eq .Receiver.Type.CName "godot_object") .Receiver.Type.HasPointer }}
            rcv := unsafe.Pointer(gdt)
        {{- else if and (eq .Receiver.Type.CName "void") .Receiver.Type.HasPointer }}
            rcv := unsafe.Pointer(gdt)
        {{- else }}
            rcv := (*C.{{ .Receiver.Type.CName }})(unsafe.Pointer(gdt))
        {{- end }}
        {{- range $k, $arg := .Arguments }}
            {{- if and (eq $arg.Type.CName "godot_object") $arg.Type.HasPointer }}
                in{{ $k }} := unsafe.Pointer({{ $arg.Name }})
            {{- else if and (eq $arg.Type.CName "void") $arg.Type.HasPointer }}
                in{{ $k }} := unsafe.Pointer({{ $arg.Name }})
            {{- else if and (eq $arg.Type.CName "char") $arg.Type.HasPointer }}
                /* {{ $arg.Type.CName }} */
                in{{ $k }} := unsafe.Pointer(C.CString({{ $arg.Name }}))
                defer C.free(unsafe.Pointer(in{{ $k }}))
            {{- else if and (eq $arg.Type.CName "godot_variant") $arg.Type.HasDoublePointer }}
                cArr{{ $k }} := CArrayFromVariantPtrSlice({{ $arg.Name }})
                defer Free(unsafe.Pointer(cArr{{ $k }}))
                in{{ $k }} := (**C.{{ $arg.Type.CName }})(unsafe.Pointer(cArr{{ $k }}))
            {{- else if and (eq $arg.Type.CName "void") $arg.Type.HasDoublePointer }}
                cArr{{ $k }} := CArrayRefFromPtrSlice({{ $arg.Name }})
                in{{ $k }} := (*unsafe.Pointer)(unsafe.Pointer(cArr{{ $k }}))
            {{- else if $arg.Type.HasPointer }}
                in{{ $k }} := (*C.{{ $arg.Type.CName }})(unsafe.Pointer(&{{ $arg.Name }}))
            {{- else }}
                in{{ $k }} := *(*C.{{ $arg.Type.CName }})(unsafe.Pointer(&{{ $arg.Name }}))
            {{- end }}
        {{- end }}

        C.go_{{ .CName }}(
            api, 
            rcv,
            {{- range $k, $arg := .Arguments }}
                in{{ $k }},
            {{- end }}
        )

        {{- range $k, $arg := .Arguments }}
            runtime.KeepAlive(in{{$k}})
        {{- end }}
    }
{{ end }}

{{ define "GETTER_METHOD" }}
    /* Getter Method: {{ .CName }} -> {{ .ReturnType.CName }} */
    func (gdt *{{ .Receiver.Type.Name }}) {{ .Name }}({{ template "ARGUMENTS" .Arguments }})
    {{- if and (eq .ReturnType.Name "GodotObject") .ReturnType.HasPointer -}}
        *GodotObject
    {{- else if and (eq .ReturnType.CName "char") .ReturnType.HasPointer -}}
        string
    {{- else if and .ReturnType.IsVoid .ReturnType.HasPointer -}}
        unsafe.Pointer
    {{- else if .ReturnType.HasPointer -}}
        {{ .ReturnType.Name }}
    {{- else -}}
        {{ .ReturnType.Name }}
    {{- end }} {
        {{ template "DESCRIBE_CMETHOD" . }}
        api := {{ .ApiMetadata.Name }}
        {{- if and (eq .Receiver.Type.CName "godot_object") .Receiver.Type.HasPointer }}
            rcv := unsafe.Pointer(gdt)
        {{- else if and (eq .Receiver.Type.CName "void") .Receiver.Type.HasPointer }}
            rcv := unsafe.Pointer(gdt)
        {{- else }}
            rcv := (*C.{{ .Receiver.Type.CName }})(unsafe.Pointer(gdt))
        {{- end }}
        {{- range $k, $arg := .Arguments }}
            /* {{ $arg.Type.CName }} */
            {{- if and (eq $arg.Type.CName "godot_object") $arg.Type.HasPointer }}
                in{{ $k }} := unsafe.Pointer({{ $arg.Name }})
            {{- else if and (eq $arg.Type.CName "void") $arg.Type.HasPointer }}
                in{{ $k }} := unsafe.Pointer(&{{ $arg.Name }})
            {{- else if and (eq $arg.Type.CName "char") $arg.Type.HasPointer }}
                in{{ $k }} := C.CString({{ $arg.Name }})
                defer C.free(unsafe.Pointer(in{{ $k }}))
            {{- else if and (eq $arg.Type.CName "godot_variant") $arg.Type.HasDoublePointer }}
                cArr{{ $k }} := CArrayFromVariantPtrSlice({{ $arg.Name }})
                defer Free(unsafe.Pointer(cArr{{ $k }}))
                in{{ $k }} := (**C.{{ $arg.Type.CName }})(unsafe.Pointer(cArr{{ $k }}))
            {{- else if and (eq $arg.Type.CName "void") $arg.Type.HasDoublePointer }}
                cArr{{ $k }} := CArrayRefFromPtrSlice({{ $arg.Name }})
                in{{ $k }} := (*unsafe.Pointer)(unsafe.Pointer(cArr{{ $k }}))
            {{- else if $arg.Type.HasPointer }}
                in{{ $k }} := (*C.{{ $arg.Type.CName }})(unsafe.Pointer(&{{ $arg.Name }}))
            {{- else }}
                in{{ $k }} := *(*C.{{ $arg.Type.CName }})(unsafe.Pointer(&{{ $arg.Name }}))
            {{- end }}
        {{- end }}

        ret := C.go_{{ .CName }}(
            api, 
            rcv,
            {{- range $k, $arg := .Arguments }}
                in{{ $k }},
            {{- end }}
        )

        {{- range $k, $arg := .Arguments }}
            runtime.KeepAlive(in{{$k}})
        {{- end }}

        return {{ if and (eq .ReturnType.Name "GodotObject") .ReturnType.HasPointer -}}
            (*GodotObject)(unsafe.Pointer(ret))
        {{- else if and (eq .ReturnType.CName "char") .ReturnType.HasPointer -}}
            C.GoString(ret)
        {{- else if and (eq .ReturnType.CName "void") .ReturnType.HasPointer -}}
            unsafe.Pointer(ret)
        {{- else -}}            
            *(*{{ .ReturnType.Name }})(unsafe.Pointer(&ret))
        {{- end }}
    }
{{ end }}

{{ define "GLOBAL_METHOD" }}
    /* Global Method: {{ if .ReturnType.HasPointer }}*{{ end }}{{ .CName }} -> {{ if .ReturnType.HasPointer }}*{{ end }}{{ .ReturnType.CName }} */
    {{ $methodName := .Name }}
    func {{ .Name }}({{ template "ARGUMENTS" .Arguments }})
    {{- if and (eq .ReturnType.CName "char") .ReturnType.HasPointer -}}
        string
    {{- else if and .ReturnType.IsVoid (not .ReturnType.HasPointer) -}}
    {{- else if and .ReturnType.IsVoid .ReturnType.HasPointer -}}
        unsafe.Pointer
    {{- else if .ReturnType.HasPointer -}}
        *{{ .ReturnType.Name }}
    {{- else -}}
        {{ .ReturnType.Name }}
    {{- end }} {
        api := {{ .ApiMetadata.Name }}

        {{- range $k, $arg := .Arguments }}
            {{- if and (eq $arg.Type.CName "godot_object") $arg.Type.HasPointer }}
                in{{ $k }} := unsafe.Pointer({{ $arg.Name }})
            {{- else if and (eq $arg.Type.CName "void") $arg.Type.HasPointer }}
                in{{ $k }} := unsafe.Pointer({{ $arg.Name }})
            {{- else if and (eq $arg.Type.CName "char") $arg.Type.HasPointer }}
                /* {{ $arg.Type.CName }} */
                in{{ $k }} := C.CString({{ $arg.Name }})
                defer C.free(unsafe.Pointer(in{{ $k }}))
            {{- else if and (eq $arg.Type.CName "godot_variant") $arg.Type.HasDoublePointer }}
                cArr{{ $k }} := CArrayFromVariantPtrSlice({{ $arg.Name }})
                defer Free(unsafe.Pointer(cArr{{ $k }}))
                in{{ $k }} := (**C.{{ $arg.Type.CName }})(unsafe.Pointer(cArr{{ $k }}))
            {{- else if and (eq $arg.Type.CName "void") $arg.Type.HasDoublePointer }}
                cArr{{ $k }} := CArrayRefFromPtrSlice({{ $arg.Name }})
                in{{ $k }} := (*unsafe.Pointer)(unsafe.Pointer(cArr{{ $k }}))
            {{- else if $arg.Type.HasPointer }}
                in{{ $k }} := (*C.{{ $arg.Type.CName }})(unsafe.Pointer(&{{ $arg.Name }}))
            {{- else }}
                in{{ $k }} := *(*C.{{ $arg.Type.CName }})(unsafe.Pointer(&{{ $arg.Name }}))
            {{- end }}
        {{- end }}

        {{ template "DESCRIBE_CMETHOD" . }}
        {{ if .IsSetter }}
            C.go_{{ .CName }}(
                api,
                {{- range $k, $arg := .Arguments }}
                    in{{ $k }},
                {{- end }}
            )

            {{- range $k, $arg := .Arguments }}
                runtime.KeepAlive(in{{$k}})
            {{- end }}
        {{ else }}
            ret := C.go_{{ .CName }}(
                api,
                {{- range $k, $arg := .Arguments }}
                    in{{ $k }},
                {{- end }}
            )

            {{- range $k, $arg := .Arguments }}
                runtime.KeepAlive(in{{$k}})
            {{- end }}

            return {{ if and (eq .ReturnType.Name "GodotObject") .ReturnType.HasPointer -}}
                (*GodotObject)(unsafe.Pointer(ret))
            {{ else if and (eq .ReturnType.Name "void") .ReturnType.HasPointer -}}
                unsafe.Pointer(ret)
            {{ else if and (eq .ReturnType.Name "MethodBind") .ReturnType.HasPointer -}}
                (*{{ .ReturnType.Name }})(unsafe.Pointer(&ret))
            {{- else -}}
                *(*{{ .ReturnType.Name }})(unsafe.Pointer(&ret))
            {{- end }}
        {{ end }}
    }
{{ end }}

{{ define "DESCRIBE_CMETHOD" }}
    /* go_{{ .CName }}(API_STRUCT
    {{- range $k, $arg := .Arguments }}
        {{- if $arg.Type.HasPointer }}, * {{- $arg.Type.CName }}
        {{- else if $arg.Type.HasDoublePointer }}, ** {{- $arg.Type.CName }}
        {{- else}}, {{- $arg.Type.CName }}
        {{- end }}
    {{- end }}) -> {{- if .ReturnType.HasPointer }} * {{- .ReturnType.Name }}
        {{- else if .ReturnType.HasDoublePointer }} ** {{- .ReturnType.Name }}
        {{- else}} {{- .ReturnType.CName }}
        {{- end }} */
{{ end }}

{{ define "ARGUMENTS" }}
    {{- range $k, $arg := . -}}
        {{ $arg.Name }}
        {{- if and (eq $arg.Type.CName "char") $arg.Type.HasPointer }} string,
        {{- else if and (eq $arg.Type.CName "godot_object") $arg.Type.HasPointer }} *GodotObject,
        {{- else if and $arg.Type.IsVoid $arg.Type.HasPointer }} unsafe.Pointer,
        {{- else if and $arg.Type.IsVoid $arg.Type.HasDoublePointer }} []unsafe.Pointer,
        {{- else if $arg.Type.HasPointer }} {{ $arg.Type.Name }},
        {{- else if $arg.Type.HasDoublePointer }} []*{{ $arg.Type.Name }},
        {{- else }} {{ $arg.Type.Name }},{{ end -}}
    {{- end -}}
{{ end }}
